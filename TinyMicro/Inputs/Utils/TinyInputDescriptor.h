/******************************************************************************************
 *
 *   _______ _             __  __ _
 *  |__   __(_)           |  \/  (_)
 *     | |   _ _ __  _   _| \  / |_  ___ _ __ ___
 *     | |  | | '_ \| | | | |\/| | |/ __| '__/ _ \
 *     | |  | | | | | |_| | |  | | | (__| | | (_) |
 *     |_|  |_|_| |_|\__, |_|  |_|_|\___|_|  \___/
 *                    __/ |
 *	                 |___/
 *
 * @author   : ALVES Quentin
 * @creation : 14/10/2023
 * @version  : 2024.1
 * @licence  : MIT
 * @project  : Micro library use for C++ basic game dev, produce for
 *			   Tiny Squad team use originaly.
 *
 ******************************************************************************************/

#pragma once

#include "TinyInputKeys.h"

tiny_enum( TinyInputDevices ) {

	TI_DEVICE_KEYBOARD = 0,
	TI_DEVICE_MOUSE,
	TI_DEVICE_GAMEPAD,

	TI_DEVICE_COUNT

};

tiny_enum( TinyInputTypes ) {

	TI_TYPE_BUTTON = 0,
	TI_TYPE_AXIS_1D,
	TI_TYPE_AXIS_2D

};

tm_struct TinyInputDescriptor {

	TinyInputDevices Device = TI_DEVICE_KEYBOARD;
	TinyInputTypes Type		= TI_TYPE_BUTTON;
	TinyInputKeys Key		= TIK_KEY_A;

};

#define TinyInputKey( NAME ) TinyInputs::Descriptors[ TIK_##NAME ]
#define TinyInputMouse( NAME ) TinyInputs::Descriptors[ TIK_KEY_COUNT + TIK_##NAME ]
#define TinyInputGamepad( NAME ) TinyInputs::Descriptors[ TIK_KEY_COUNT + TIK_MOUSE_COUNT + TIK_##NAME ]

namespace TinyInputs {

	#define TINY_REG_DESC( DEVICE, TYPE, KEY )\
		TinyInputDescriptor{ DEVICE, TYPE, TIK_##KEY }

	#define TINY_REG_KEY( VALUE )	   TINY_REG_DESC( TI_DEVICE_KEYBOARD, TI_TYPE_BUTTON, VALUE )
	#define TINY_REG_MOUSE( VALUE )    TINY_REG_DESC( TI_DEVICE_MOUSE, TI_TYPE_BUTTON, VALUE )
	#define TINY_REG_GP( VALUE, TYPE ) TINY_REG_DESC( TI_DEVICE_GAMEPAD, TYPE, VALUE )

	#define TINY_REG_GAMEPAD( VALUE ) TINY_REG_GP( VALUE, TI_TYPE_BUTTON )
	#define TINY_REG_GAMEPAD_AXIS_1D( VALUE ) TINY_REG_GP( VALUE, TI_TYPE_AXIS_1D )
	#define TINY_REG_GAMEPAD_AXIS_2D( VALUE ) TINY_REG_GP( VALUE, TI_TYPE_AXIS_2D )

	static const TinyInputDescriptor Descriptors[ TIK_KEY_COUNT + TIK_MOUSE_COUNT + TIK_GAMEPAD_COUNT ]{
		// === KEYBOARD ===
		TINY_REG_KEY( KEY_A ),
		TINY_REG_KEY( KEY_B ),
		TINY_REG_KEY( KEY_C ),
		TINY_REG_KEY( KEY_D ),
		TINY_REG_KEY( KEY_E ),
		TINY_REG_KEY( KEY_F ),
		TINY_REG_KEY( KEY_G ),
		TINY_REG_KEY( KEY_H ),
		TINY_REG_KEY( KEY_I ),
		TINY_REG_KEY( KEY_J ),
		TINY_REG_KEY( KEY_K ),
		TINY_REG_KEY( KEY_L ),
		TINY_REG_KEY( KEY_M ),
		TINY_REG_KEY( KEY_N ),
		TINY_REG_KEY( KEY_O ),
		TINY_REG_KEY( KEY_P ),
		TINY_REG_KEY( KEY_Q ),
		TINY_REG_KEY( KEY_R ),
		TINY_REG_KEY( KEY_S ),
		TINY_REG_KEY( KEY_T ),
		TINY_REG_KEY( KEY_U ),
		TINY_REG_KEY( KEY_V ),
		TINY_REG_KEY( KEY_W ),
		TINY_REG_KEY( KEY_X ),
		TINY_REG_KEY( KEY_Y ),
		TINY_REG_KEY( KEY_Z ),
		TINY_REG_KEY( KEY_0 ),
		TINY_REG_KEY( KEY_1 ),
		TINY_REG_KEY( KEY_2 ),
		TINY_REG_KEY( KEY_3 ),
		TINY_REG_KEY( KEY_4 ),
		TINY_REG_KEY( KEY_5 ),
		TINY_REG_KEY( KEY_6 ),
		TINY_REG_KEY( KEY_7 ),
		TINY_REG_KEY( KEY_8 ),
		TINY_REG_KEY( KEY_9 ),
		TINY_REG_KEY( KEY_F1 ),
		TINY_REG_KEY( KEY_F2 ),
		TINY_REG_KEY( KEY_F3 ),
		TINY_REG_KEY( KEY_F4 ),
		TINY_REG_KEY( KEY_F5 ),
		TINY_REG_KEY( KEY_F6 ),
		TINY_REG_KEY( KEY_F7 ),
		TINY_REG_KEY( KEY_F8 ),
		TINY_REG_KEY( KEY_F9 ),
		TINY_REG_KEY( KEY_F10 ),
		TINY_REG_KEY( KEY_F11 ),
		TINY_REG_KEY( KEY_F12 ),
		TINY_REG_KEY( KEY_F13 ),
		TINY_REG_KEY( KEY_F14 ),
		TINY_REG_KEY( KEY_F15 ),
		TINY_REG_KEY( KEY_F16 ),
		TINY_REG_KEY( KEY_F17 ),
		TINY_REG_KEY( KEY_F18 ),
		TINY_REG_KEY( KEY_F19 ),
		TINY_REG_KEY( KEY_F20 ),
		TINY_REG_KEY( KEY_F21 ),
		TINY_REG_KEY( KEY_F22 ),
		TINY_REG_KEY( KEY_F23 ),
		TINY_REG_KEY( KEY_F24 ),
		TINY_REG_KEY( KEY_F25 ),
		TINY_REG_KEY( KEY_SPACE ),
		TINY_REG_KEY( KEY_APOSTROPHE ),
		TINY_REG_KEY( KEY_COMMA ),
		TINY_REG_KEY( KEY_MINUS ),
		TINY_REG_KEY( KEY_PERIOD ),
		TINY_REG_KEY( KEY_SLASH ),
		TINY_REG_KEY( KEY_SEMICOLON ),
		TINY_REG_KEY( KEY_EQUAL ),
		TINY_REG_KEY( KEY_LEFT_BRACKET ),
		TINY_REG_KEY( KEY_BACKSLASH ),
		TINY_REG_KEY( KEY_RIGHT_BRACKET ),
		TINY_REG_KEY( KEY_GRAVE_ACCENT ),
		TINY_REG_KEY( KEY_ESCAPE ),
		TINY_REG_KEY( KEY_ENTER ),
		TINY_REG_KEY( KEY_TAB ),
		TINY_REG_KEY( KEY_BACKSPACE ),
		TINY_REG_KEY( KEY_INSERT ),
		TINY_REG_KEY( KEY_DELETE ),
		TINY_REG_KEY( KEY_RIGHT ),
		TINY_REG_KEY( KEY_LEFT ),
		TINY_REG_KEY( KEY_DOWN ),
		TINY_REG_KEY( KEY_UP ),
		TINY_REG_KEY( KEY_PAGE_UP ),
		TINY_REG_KEY( KEY_PAGE_DOWN ),
		TINY_REG_KEY( KEY_HOME ),
		TINY_REG_KEY( KEY_END ),
		TINY_REG_KEY( KEY_CAPS_LOCK ),
		TINY_REG_KEY( KEY_SCROLL_LOCK ),
		TINY_REG_KEY( KEY_NUM_LOCK ),
		TINY_REG_KEY( KEY_PRINT_SCREEN ),
		TINY_REG_KEY( KEY_PAUSE ),
		TINY_REG_KEY( KEY_KP_0 ),
		TINY_REG_KEY( KEY_KP_1 ),
		TINY_REG_KEY( KEY_KP_2 ),
		TINY_REG_KEY( KEY_KP_3 ),
		TINY_REG_KEY( KEY_KP_4 ),
		TINY_REG_KEY( KEY_KP_5 ),
		TINY_REG_KEY( KEY_KP_6 ),
		TINY_REG_KEY( KEY_KP_7 ),
		TINY_REG_KEY( KEY_KP_8 ),
		TINY_REG_KEY( KEY_KP_9 ),
		TINY_REG_KEY( KEY_KP_DECIMAL ),
		TINY_REG_KEY( KEY_KP_DIVIDE ),
		TINY_REG_KEY( KEY_KP_MULTIPLY ),
		TINY_REG_KEY( KEY_KP_SUBTRACT ),
		TINY_REG_KEY( KEY_KP_ADD ),
		TINY_REG_KEY( KEY_KP_ENTER ),
		TINY_REG_KEY( KEY_KP_EQUAL ),
		TINY_REG_KEY( KEY_LEFT_SHIFT ),
		TINY_REG_KEY( KEY_LEFT_CONTROL ),
		TINY_REG_KEY( KEY_LEFT_ALT ),
		TINY_REG_KEY( KEY_LEFT_SUPER ),
		TINY_REG_KEY( KEY_RIGHT_SHIFT ),
		TINY_REG_KEY( KEY_RIGHT_CONTROL ),
		TINY_REG_KEY( KEY_RIGHT_ALT ),
		TINY_REG_KEY( KEY_RIGHT_SUPER ),
		TINY_REG_KEY( KEY_MENU ),

		// === MOUSE ===
		TINY_REG_MOUSE( MOUSE_LEFT ),
		TINY_REG_MOUSE( MOUSE_RIGHT ),
		TINY_REG_MOUSE( MOUSE_MIDDLE ),
		TINY_REG_DESC( TI_DEVICE_MOUSE, TI_TYPE_AXIS_2D, MOUSE_CURSOR ),
		TINY_REG_DESC( TI_DEVICE_MOUSE, TI_TYPE_AXIS_2D, MOUSE_SCROLL ),

		// === GAMEPAD BUTTON ===
		TINY_REG_GAMEPAD( GAMEPAD_A ),
		TINY_REG_GAMEPAD( GAMEPAD_B ),
		TINY_REG_GAMEPAD( GAMEPAD_X ),
		TINY_REG_GAMEPAD( GAMEPAD_Y ),
		TINY_REG_GAMEPAD( GAMEPAD_LEFT_BUMPER ),
		TINY_REG_GAMEPAD( GAMEPAD_RIGHT_BUMPER ),
		TINY_REG_GAMEPAD( GAMEPAD_BACK ),
		TINY_REG_GAMEPAD( GAMEPAD_START ),
		TINY_REG_GAMEPAD( GAMEPAD_GUIDE ),
		TINY_REG_GAMEPAD( GAMEPAD_LEFT_THUMB ),
		TINY_REG_GAMEPAD( GAMEPAD_RIGHT_THUMB ),
		TINY_REG_GAMEPAD( GAMEPAD_DPAD_UP ),
		TINY_REG_GAMEPAD( GAMEPAD_DPAD_RIGHT ),
		TINY_REG_GAMEPAD( GAMEPAD_DPAD_DOWN ),
		TINY_REG_GAMEPAD( GAMEPAD_DPAD_LEFT ),

		// === GAMEPAD AXIS ===
		TINY_REG_GAMEPAD_AXIS_1D( GAMEPAD_AXIS_LEFT_X ),
		TINY_REG_GAMEPAD_AXIS_1D( GAMEPAD_AXIS_LEFT_Y ),
		TINY_REG_GAMEPAD_AXIS_1D( GAMEPAD_AXIS_RIGHT_X ),
		TINY_REG_GAMEPAD_AXIS_1D( GAMEPAD_AXIS_RIGHT_Y ),
		TINY_REG_GAMEPAD_AXIS_1D( GAMEPAD_AXIS_LEFT_TRIGGER ),
		TINY_REG_GAMEPAD_AXIS_1D( GAMEPAD_AXIS_RIGHT_TRIGGER ),
		TINY_REG_GAMEPAD_AXIS_2D( GAMEPAD_AXIS_LEFT ),
		TINY_REG_GAMEPAD_AXIS_2D( GAMEPAD_AXIS_RIGHT ),
		TINY_REG_GAMEPAD_AXIS_2D( GAMEPAD_AXIS_TRIGGERS )
	};

	tm_dll TinyInputKeys ConvertKey( tiny_int glfw_key );

	tm_dll tiny_string_view GetInputTypeList( const TinyInputDevices device );

	tm_dll tiny_string_view GetInputKeyList(
		const TinyInputDevices device,
		const TinyInputTypes type 
	);

	tm_dll tiny_string_view GetInputStateList( );

	tm_dll tiny_string_view GetInputModifierList( );

};
